
goog.provide('urlbuilder.EventHandler');
goog.provide('urlbuilder.EventHandler.EventType');

goog.require('goog.array');
goog.require('goog.events');
goog.require('goog.events.EventTarget');
goog.require('goog.object');
goog.require('goog.string');
goog.require('urlbuilder.UI');

/**
 * Handlers class.
 * @constructor
 */
urlbuilder.EventHandler = function(elements, actions)
{
  goog.events.EventTarget.call(this);
};
goog.inherits(urlbuilder.EventHandler, goog.events.EventTarget);

/**
 * Activate the listeners on the DOM elements.
 * @param {Array.<HTMLElement>} elements The input elements.
 * @param {Object} actions The actions performed when
     urlbuilder.EventHandler.EVENTS are dispatched.
 */
urlbuilder.EventHandler.prototype.init = function(elements, actions)
{
  goog.array.forEach(elements, function(element)
  {
    var id = element['id'];
    var thisObject = this;
    if(goog.string.startsWith(id, urlbuilder.UI.PREFIX))
    {
      var elementName = goog.string.remove(id, urlbuilder.UI.PREFIX).toUpperCase();
      goog.object.forEach(urlbuilder.EventHandler[elementName], function(handler, eventName)
      {
        goog.events.listen(element, eventName, handler, false, thisObject);
      });
    }
  });

  goog.object.forEach(actions, function(action, eventName)
  {
    this.addEventListener(eventName, action);
  });
};

/**
 * Handlers for the URL text field.
 */
urlbuilder.EventHandler.prototype.URL = {
  'input': function(evt) {
    
  }
};

/**
 * Handlers for the scheme text field.
 */
urlbuilder.EventHandler.prototype.SCHEME = {
  'input': function(evt) {
    this.defaultInput(evt);
  }
};

/**
 * Handlers for the domain text field.
 */
urlbuilder.EventHandler.prototype.DOMAIN = {
  'input': function(evt) {
    this.defaultInput(evt);
  }
};

/**
 * Handlers for the port text field.
 */
urlbuilder.EventHandler.prototype.PORT = {
  'input': function(evt) {
    this.defaultInput(evt);
  }
};

/**
 * Handlers for the path text field.
 */
urlbuilder.EventHandler.prototype.PATH = {
  'input': function(evt) {
    this.defaultInput(evt);
  }
};

/**
 * Default input behavior for a text field.
 * @param {Event} evt The event object.
 */
urlbuilder.EventHandler.prototype.defaultInput = function(evt)
{
  
};

/**
 * The events generated by the interface.
 */
urlbuilder.EventHandler.EventType = {
  'URL': 'url',
  'FIELD': 'field'
};
