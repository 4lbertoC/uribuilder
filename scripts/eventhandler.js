'use strict';

goog.provide('uribuilder.EventHandler');
goog.provide('uribuilder.EventHandler.EventType');
goog.provide('uribuilder.UriEvent');

goog.require('goog.array');
goog.require('goog.events');
goog.require('goog.events.Event');
goog.require('goog.events.EventTarget');
goog.require('goog.object');
goog.require('goog.string');
goog.require('uribuilder.HandlerFactory');

/**
 * Handlers class.
 * @constructor
 * @extends {goog.events.EventTarget}
 */
uribuilder.EventHandler = function()
{
  goog.events.EventTarget.call(this);
};
goog.inherits(uribuilder.EventHandler, goog.events.EventTarget);

/**
 * Activate the listeners on the DOM elements.
 * @param {Object.<string, HTMLElement>} elements The input elements.
 */
uribuilder.EventHandler.prototype.addDomListeners = function(elements)
{
  var factory = uribuilder.HandlerFactory.getInstance();
  goog.object.forEach(elements, function(element, elementName)
  {
    var id = element['id'];
    if (factory.containsName(elementName))
    {
      goog.object.forEach(
        factory.getHandlerMap(elementName),
        function(handler, eventName)
        {
          var handlerWithContext =
            factory.getHandlerWithContext(elementName, eventName, this);
          goog.events.listen(element, eventName, handlerWithContext);
        }, this);
    }
    else
    {
      if (element.type === 'text')
      {
        // Default behavior for a text field
        goog.events.listen(element, 'input', this.onFieldInput_, false, this);
      }
    }
  }, this);
};

/**
 * Default input behavior for a text field.
 * @param {Event} evt The event object.
 * @private
 */
uribuilder.EventHandler.prototype.onFieldInput_ = function(evt)
{
  var target = evt['target'];
  var genericEvent = new goog.events.Event(
    uribuilder.EventHandler.EventType.FIELD, target);
  this.dispatchEvent(genericEvent);
};

/**
 * Default input behavior for the uri field.
 * @param {Event} evt The event object.
 * @private
 */
uribuilder.EventHandler.prototype.onToggleClick_ = function(evt)
{
  var target = evt['target'];
  var genericEvent = new goog.events.Event(
    uribuilder.EventHandler.EventType.TOGGLE, target);
  this.dispatchEvent(genericEvent);
};

/**
 * Default input behavior for the uri field.
 * @param {Event} evt The event object.
 * @private
 */
uribuilder.EventHandler.prototype.onUriInput_ = function(evt)
{
  var target = evt['target'];
  var uri = target['value'];
  var uriEvent = new uribuilder.UriEvent(uri, target);
  this.dispatchEvent(uriEvent);
};

/**
 * The events generated by the interface.
 * @enum {string}
 */
uribuilder.EventHandler.EventType = {
  URI: 'uri',
  FIELD: 'field',
  TOGGLE: 'toggle'
};

/**
 * The event generated when a uri is received.
 * @param {string} uri The uri.
 * @param {EventTarget} target The target of the event.
 * @constructor
 */
uribuilder.UriEvent = function(uri, target)
{
  goog.events.Event.call(this);

  this.type = uribuilder.EventHandler.EventType.URI;
  this.target = target;
  this.uri = uri;
};
goog.inherits(uribuilder.UriEvent, goog.events.Event);

/**
 * The uri.
 * @type {string}
 */
uribuilder.UriEvent.prototype.uri = '';

