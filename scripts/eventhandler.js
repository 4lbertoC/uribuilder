
goog.provide('urlbuilder.EventHandler');
goog.provide('urlbuilder.EventHandler.EventType');
goog.provide('urlbuilder.UrlEvent');

goog.require('goog.array');
goog.require('goog.events');
goog.require('goog.events.EventTarget');
goog.require('goog.events.Event');
goog.require('goog.object');
goog.require('goog.string');

/**
 * Handlers class.
 * @param {Object.<string, HTMLElement>} elements The input elements.
 * @constructor
 */
urlbuilder.EventHandler = function(elements)
{
  goog.events.EventTarget.call(this);
  this.init_(elements);
};
goog.inherits(urlbuilder.EventHandler, goog.events.EventTarget);

/**
 * Activate the listeners on the DOM elements.
 * @param {Object.<string, HTMLElement>} elements The input elements.
 */
urlbuilder.EventHandler.prototype.init_ = function(elements)
{
  goog.object.forEach(elements, function(element, elementName)
  {
    var id = element['id'];
    if(goog.isObject(urlbuilder.EventHandler[elementName]))
    {
      goog.object.forEach(urlbuilder.EventHandler[elementName], function(handler, eventName)
      {
        goog.events.listen(element, eventName, handler, false, this);
      }, this);
    }
    else
    {
      // Default behavior for a text field
      goog.events.listen(element, 'input', this.onFieldInput_, false, this);
    }
  }, this);
};

/**
 * Handlers for the URL text field.
 * @export
 */
urlbuilder.EventHandler.URL = {
  'input': function(evt) {
    this.onUrlInput_(evt);
  }
};

/**
 * Default input behavior for a text field.
 * @param {Event} evt The event object.
 */
urlbuilder.EventHandler.prototype.onFieldInput_ = function(evt)
{
  var target = evt['target'];
  var genericEvent = new goog.events.Event(
    urlbuilder.EventHandler.EventType.FIELD, target);
  this.dispatchEvent(genericEvent);
};

/**
 * Default input behavior for the url field.
 * @param {Event} evt The event object.
 * @private
 */
urlbuilder.EventHandler.prototype.onUrlInput_ = function(evt)
{
  var target = evt['target'];
  var url = target['value'];
  var urlEvent = new urlbuilder.UrlEvent(url, target);
  this.dispatchEvent(urlEvent);
};

/**
 * The events generated by the interface.
 */
urlbuilder.EventHandler.EventType = {
  URL: 'url',
  FIELD: 'field'
};

/**
 * The event generated when a url is received.
 * @constructor
 */
urlbuilder.UrlEvent = function(url, target)
{
  goog.events.Event.call(this);

  this.type = urlbuilder.EventHandler.EventType.URL;
  this.target = target;
  this.url = url;
};
goog.inherits(urlbuilder.UrlEvent, goog.events.Event);

/**
 * The url.
 * @type {string}
 */
urlbuilder.UrlEvent.prototype.url = '';

